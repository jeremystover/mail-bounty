"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var ripple_address_codec_1 = __importDefault(require("ripple-address-codec"));
var utils = __importStar(require("../utils"));
var computed = __importStar(require("../computed"));
function Encode(destination) {
    assert_1.default.equal(typeof destination, 'object', 'Input should contain object');
    assert_1.default.notEqual(destination, null, 'Input should contain object');
    assert_1.default.strictEqual(Object.keys(destination).indexOf('account') > -1, true, 'Input should contain `account`');
    var account = destination.account;
    var tag = destination.tag === null || destination.tag === undefined
        ? null
        : Number(destination.tag);
    var accountHex = utils.toHex(ripple_address_codec_1.default.decodeAddress(account));
    var tagTypeHex = tag === null
        ? '00'
        : '01';
    var tagHex = utils.uInt32_ToUInt32LE(tag || 0);
    var bytes = utils.toBytes(accountHex + tagTypeHex + tagHex);
    return ripple_address_codec_1.default.codecs.ripple.encode(bytes, computed.CodecOptions(destination));
}
exports.default = Encode;
